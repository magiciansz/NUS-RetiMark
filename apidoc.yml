openapi: 3.0.3
info:
  title: NUS-Retimark Backend API Repo
  description: |-
    This is a list of APIs used on the server. you can find it on our repo, at apidoc.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: ngxianghan99@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:XXXX/api/v1
tags:
  - name: Authentication
    description: User Management
  - name: Patient
    description: Patient APIs

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Log In
      description: Log in with user's credentials
      parameters:
        - name: timezone
          in: query
          description: timezone to return expiry dates of tokens
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginForm"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Invalid data format or data that does not match the expected schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginInvalidData"
        "401":
          description: Incorrect email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginIncorrectDetailsError"
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Create a user
      description: Create a user with provided credentials
      parameters:
        - name: timezone
          in: query
          description: timezone to return expiry dates of tokens
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginForm"
        required: true
      responses:
        "201":
          description: Resource Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Invalid data format or data that does not match the expected schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginInvalidData"
        "409":
          description: Username already taken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserUsernameTaken"
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Log out
      description: Log out a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenForm"
        required: true
      responses:
        "204":
          description: No content
        "400":
          description: Invalid data format or data that does not match the expected schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutOrRefreshInvalidData"
        "404":
          description: Refresh Token not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutTokenNotFound"
  /auth/refresh-tokens:
    post:
      tags:
        - Authentication
      summary: Refresh access and refresh tokens
      description: Refresh tokens given refresh token
      parameters:
        - name: timezone
          in: query
          description: timezone to return expiry dates of tokens
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenForm"
        required: true
      responses:
        "200":
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenResponse"
        "400":
          description: Invalid data format or data that does not match the expected schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutOrRefreshInvalidData"
        "401":
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredOrInvalidRefreshToken"
  /patient:
    post:
      tags:
        - Patient
      summary: Create a Patient
      description: Create patient given all parameters
      parameters:
        - name: timezone
          in: query
          description: timezone to return creation date of patient
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreatePatientForm"
        required: true
      responses:
        "201":
          description: Successfully Created Patient
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePatientResponse"
        "400":
          description: Invalid data format or data that does not match the expected schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePatientBadRequest"
        "401":
          description: Missing or invalid access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorisedRequest"

components:
  schemas:
    UnauthorisedRequest:
      type: object
      properties:
        status:
          type: integer
          example: 401
        message:
          type: string
          example: "Please Authenticate"
        stack:
          type: string
          example: "Error: Please Authenticate"
      
    CreatePatientBadRequest:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: "[{\"type\":\"field\",\"value\":\"1999/09/21\",\"msg\":\"date_of_birth has to be a valid date with format YYYY-MM-DD\",\"path\":\"date_of_birth\",\"location\":\"body\"}]"
        stack:
          type: string
          example: "Error: [{\"type\":\"field\",\"value\":\"1999/09/21\",\"msg\":\"date_of_birth has to be a valid date with format YYYY-MM-DD\",\"path\":\"date_of_birth\",\"location\":\"body\"}]"
    CreatePatientResponse:
      type: object
      properties:
        patient:
          type: object
          properties:
            id: 
              type: integer
              example: 1
            version:
              type: integer
              example: 1
            name:
              type: string
              example: "Tan Jun Jie"
            date_of_birth:
              type: string
              example: "1999-09-21"
            age:
              type: integer
              example: 24
            sex:
              type: string
              example: "M"
            left_eye_image:
              type: string
              example: "tests3bucket.com"
            right_eye_image:
              type: string
              example: "tests3bucket.com"
            left_diabetic_retinography_stage:
              type: integer
              example: 1
            left_diabetic_retinography_prob:
              type: number
              example: 0.56
            right_diabetic_retinography_stage:
              type: integer
              example: 1
            right_diabetic_retinography_prob:
              type: number
              example: 0.11
            left_ocular_prob:
              type: number
              example: 0.11
            right_ocular_prob:
              type: number
              example: 0.11
            left_glaucoma_prob:
              type: number
              example: 0.11
            right_glaucoma_prob:
              type: number
              example: 0.11
            doctor_notes:
              type: string
              example: "This patient is healthy."
            report_pdf:
              type: string
              example: "testreportlink.com"
            visit_date:
              type: string
              example: "2023-09-23T18:14:45+08:00"
    CreatePatientForm:
      type: object
      properties:
        name:
          type: string
          default: "Tan Jun Jie"
          enum: 
          - Tan Jun Jie
          - testStr2
        date_of_birth:
          type: string
          example: "1999-09-21"
        sex:
          type: string
          example: "M"
        left_eye_image:
          type: string
          format: binary
        right_eye_image:
          type: string
          format: binary
        left_diabetic_retinography_stage:
          type: integer
          example: 1
        left_diabetic_retinography_prob:
          type: number
          example: 0.56
        right_diabetic_retinography_stage:
          type: integer
          example: 1
        right_diabetic_retinography_prob:
          type: number
          example: 0.11
        left_ocular_prob:
          type: number
          example: 0.11
        right_ocular_prob:
          type: number
          example: 0.11
        left_glaucoma_prob:
          type: number
          example: 0.11
        right_glaucoma_prob:
          type: number
          example: 0.11
        doctor_notes:
          type: string
          example: "This patient is healthy."
        report_pdf:
          type: string
          format: binary

    CreateUserUsernameTaken:
      type: object
      properties:
        status:
          type: integer
          example: 409
        message:
          type: string
          example: "Username already taken"
        stack:
          type: string
          example: "Username already taken, at Object.createUser"
    LoginForm:
      type: object
      properties:
        username:
          type: string
          example: "ngxianghan99@gmail.com"
        password:
          type: string
          example: "samplepassword"
    RefreshTokenForm:
      type: object
      properties:
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImlhdCI6MTY5NDQ4NjUzNSwiZXhwIjoxNjk0NTAwOTM1LCJ0eXBlIjoicmVmcmVzaCJ9.NSX9bPKOJagAqoBpDU2SoQMFE2ST0qhYpVyR20-Z5CQ"
    ExpiredOrInvalidRefreshToken:
      type: object
      properties:
        status:
          type: integer
          example: 403
        message:
          type: string
          example: "Unauthorised: Invalid or expired refresh token."
        stack:
          type: string
          example: "Error: Unauthorised: Invalid or expired refresh token."
    LogoutTokenNotFound:
      type: object
      properties:
        status:
          type: integer
          example: 404
        message:
          type: string
          example: "Token not found"
        stack:
          type: string
          example: "Error: Token Not found, at Object.logout"
    LoginInvalidData:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: '[{\"type\":\"field\",\"value\":\"\",\"msg\":\"timezone cannot be empty\",\"path\":\"timezone\",\"location\":\"query\"},{\"type\":\"field\",\"value\":1111111111,\"msg\":\"username has to be a string\",\"path\":\"username\",\"location\":\"body\"},{\"type\":\"field\",\"value\":\"xiangh an1\",\"msg\":\"password cannot have blank spaces.\",\"path\":\"password\",\"location\":\"body\"}]'
        stack:
          type: string
          example: 'at BadRequestError (/Users/ngxianghan/Documents/Y4S1/BT4103/NUS-RetiMark/backend/app/middlewares/responseCodes.js:26:13)",'
    LoginIncorrectDetailsError:
      type: object
      properties:
        status:
          type: integer
          example: 401
        message:
          type: string
          example: "Incorrect email or password"
        stack:
          type: string
          example: "Error: Incorrect email or password, at Object.loginUserWithUsernameAndPassword"
    LogoutOrRefreshInvalidData:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: '[{"type":"field","value":"","msg":"refreshToken cannot be empty.","path":"refreshToken","location":"body"}]'
        stack:
          type: string
          example: "at BadRequestError (/Users/ngxianghan/Documents/Y4S1/BT4103/NUS-RetiMark/backend/app/middlewares/responseCodes.js:26:13)"
    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: object
          properties:
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImlhdCI6MTY5NDQ4NjUzNSwiZXhwIjoxNjk0NDkwMTM1LCJ0eXBlIjoiYWNjZXNzIn0.RfkK1wzZnwx037E7P37gDBPJ49zCEGTFv27SQ-B_lzA"
            expires:
              type: string
              example: "2023-09-23T17:29:08+08:00"
        refreshToken:
          type: object
          properties:
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImlhdCI6MTY5NDQ4NjUzNSwiZXhwIjoxNjk0NTAwOTM1LCJ0eXBlIjoicmVmcmVzaCJ9.NSX9bPKOJagAqoBpDU2SoQMFE2ST0qhYpVyR20-Z5CQ"
            expires:
              type: string
              example: "2023-09-23T21:29:08+08:00"
    LoginResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            username:
              type: string
              example: "ngxianghan99@gmail.com"
        tokens:
          type: object
          properties:
            accessToken:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImlhdCI6MTY5NDQ4NjUzNSwiZXhwIjoxNjk0NDkwMTM1LCJ0eXBlIjoiYWNjZXNzIn0.RfkK1wzZnwx037E7P37gDBPJ49zCEGTFv27SQ-B_lzA"
                expires:
                  type: string
                  example: "2023-09-23T17:29:08+08:00"
            refreshToken:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImlhdCI6MTY5NDQ4NjUzNSwiZXhwIjoxNjk0NTAwOTM1LCJ0eXBlIjoicmVmcmVzaCJ9.NSX9bPKOJagAqoBpDU2SoQMFE2ST0qhYpVyR20-Z5CQ"
                expires:
                  type: string
                  example: "2023-09-23T21:29:08+08:00"
