openapi: 3.0.3
info:
  title: NUS-Retimark Backend API Repo
  description: |-
    This is a list of APIs used on the server. you can find it on our repo, at apidoc.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: ngxianghan99@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:XXXX/api/v1
tags:
  - name: Authentication
    description: User Management
  - name: Patient
    description: Patient APIs
  - name: Patient History
    description: Patient History APIs
  - name: Model
    description: Model APIs (follow the pure URL)

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Log In
      description: Log in with user's credentials
      parameters:
        - name: timezone
          in: query
          description: timezone to return expiry dates of tokens
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginForm"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Invalid data format or data that does not match the expected schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginInvalidData"
        "401":
          description: Incorrect email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginIncorrectDetailsError"
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Create a user
      description: Create a user with provided credentials
      parameters:
        - name: timezone
          in: query
          description: timezone to return expiry dates of tokens
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginForm"
        required: true
      responses:
        "201":
          description: Resource Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Invalid data format or data that does not match the expected schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginInvalidData"
        "409":
          description: Username already taken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserUsernameTaken"
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Log out
      description: Log out a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenForm"
        required: true
      responses:
        "204":
          description: No content
        "400":
          description: Invalid data format or data that does not match the expected schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutOrRefreshInvalidData"
        "404":
          description: Refresh Token not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutTokenNotFound"
  /auth/refresh-tokens:
    post:
      tags:
        - Authentication
      summary: Refresh access and refresh tokens
      description: Refresh tokens given refresh token
      parameters:
        - name: timezone
          in: query
          description: timezone to return expiry dates of tokens
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenForm"
        required: true
      responses:
        "200":
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenResponse"
        "400":
          description: Invalid data format or data that does not match the expected schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutOrRefreshInvalidData"
        "401":
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpiredOrInvalidRefreshToken"
  /patient:
    post:
      tags:
        - Patient
      summary: Create a Patient
      description: Create patient given all parameters
      parameters:
        - name: timezone
          in: query
          description: timezone to return visit date of patient
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreatePatientForm"
        required: true
      responses:
        "201":
          description: Successfully Created Patient
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePatientResponse"
        "400":
          description: Invalid data format or data that does not match the expected schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePatientBadRequest"
        "401":
          description: Missing or invalid access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorisedRequest"
        "409":
          description: Duplicate Patient exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDuplicatePatient"
  /patient/{id}:
    patch:
      tags:
        - Patient
      summary: Update a Patient
      description: Update patient given new inputs
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: ID of patient to update
        - name: timezone
          in: query
          description: timezone to return visit date of patient
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UpdatePatientForm"
        required: true
      responses:
        "200":
          description: Successfully Updated Patient
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatePatientResponse"
        "400":
          description: Invalid data format or data that does not match the expected schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatePatientBadRequest"
        "401":
          description: Missing or invalid access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorisedRequest"
        "404":
          description: Patient not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientNotFound"
  /patient/search:
    get:
      tags:
        - Patient
      summary: Search for a Patient
      description: Search patient given query
      parameters:
        - name: query
          in: query
          description: search query for name of patient
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Search Results obtained.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchPatientResult"
        "401":
          description: Missing or invalid access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorisedRequest"

  /patient-history:
    get:
      tags:
        - Patient History
      summary: Get All Patient History
      description: Get Patient History for patients within any threshold, in ascending ID and descending version order
      parameters:
        - name: ocular_lower_threshold
          in: query
          description: lower threshold for ocular disease (0-1)
          required: true
          schema:
            type: number
        - name: ocular_upper_threshold
          in: query
          description: upper threshold for ocular disease (0-1)
          required: true
          schema:
            type: number
        - name: glaucoma_lower_threshold
          in: query
          description: lower threshold for glaucoma disease (0-1)
          required: true
          schema:
            type: number
        - name: glaucoma_upper_threshold
          in: query
          description: upper threshold for glaucoma disease (0-1)
          required: true
          schema:
            type: number
        - name: diabetic_retinopathy_lower_threshold
          in: query
          description: lower threshold for diabetic retinopathy (0-1)
          required: true
          schema:
            type: number
        - name: diabetic_retinopathy_upper_threshold
          in: query
          description: upper threshold for diabetic retinopathy (0-1)
          required: true
          schema:
            type: number
        - name: timezone
          in: query
          description: timezone to return visit date of patients
          schema:
            type: string
      responses:
        "200":
          description: Successfully Retrieved Patient History
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPatientHistoryResponse"
        "400":
          description: Invalid data format or data that does not match the expected schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPatientHistoryBadRequest"
        "401":
          description: Missing or invalid access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorisedRequest"
  /patient-history/{id}/reports:
    get:
      tags:
        - Patient History
      summary: Get All Reports for a Patient
      description: Get reports for a patient, in specified sort order
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: ID of patient to get reports
        - name: sort
          in: query
          required: true
          description: sort order for version numbers
          schema:
            type: string
            enum:
              - ascending
              - descending
        - name: timezone
          in: query
          description: timezone to return visit date of patients
          schema:
            type: string

      responses:
        "200":
          description: Successfully Retrieved Reports
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientHistoryReportResult"
        "400":
          description: Invalid data format or data that does not match the expected schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPatientHistoryBadRequest"
        "401":
          description: Missing or invalid access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorisedRequest"
        "404":
          description: Patient not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatientNotFound"
  /model-staging/api/v1/model:
    post:
      tags:
        - Model
      summary: Get Disease Probabilities
      description: Run model using image and retrieve probabilities
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ModelForm"
        required: true
      responses:
        "200":
          description: Search Results obtained.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelResult"
        "400":
          description: Search Results obtained.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlaskBadRequest"
  /model-staging/api/v1/verify:
    post:
      tags:
        - Model
      summary: Check if image is an eye
      description: Run binary classification model using image and verify if it is an image
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ModelForm"
        required: true
      responses:
        "200":
          description: Search Results obtained.
          content:
            application/json:
              schema:
                type: boolean
                example: true
        "400":
          description: Search Results obtained.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlaskBadRequest"

components:
  schemas:
    FlaskBadRequest:
      type: object
      properties:
        message:
          type: string
          example: "The browser (or proxy) sent a request that this server could not understand."
    ModelResult:
      type: object
      properties:
        amd:
          type: string
          format: number
          example: 0.5
        diabetic:
          type: string
          format: number
          example: 0.5
        glaucoma:
          type: string
          format: number
          example: 0.5
    ModelForm:
      type: object
      properties:
        image:
          type: string
          format: binary
    PatientHistoryReportResult:
      type: object
      properties:
        reports:
          type: array
          items:
            type: object
            properties:
              version:
                type: integer
              doctor_notes:
                type: string
              report_link:
                type: string
              visit_date:
                type: string
          example:
            - version: 2
              doctor_notes: "This patient is healthy."
              report_link: "testreportlink.com"
              visit_date: "2023-10-04T14:36:34+08:00"
            - version: 1
              doctor_notes: "This patient is unhealthy"
              report_link: "testreportlink.com"
              visit_date: "2023-10-03T14:36:34+08:00"
        totalCount:
          type: integer
          example: 2
    SearchPatientResult:
      type: object
      properties:
        patients:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: "Tan Jun Jie"
              date_of_birth:
                type: string
                example: "1999-09-21"
              sex:
                type: string
                example: "M"
        totalCount:
          type: integer
          example: 1
    PatientNotFound:
      type: object
      properties:
        status:
          type: integer
          example: 404
        message:
          type: string
          example: "Patient Not Found"
        stack:
          type: string
          example: "Error: Patient Not Found"
    UpdatePatientBadRequest:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: "Your right_eye_image has to be in either jpg / png format."
        stack:
          type: string
          example: "Error: Your right_eye_image has to be in either jpg / png format."
    UpdatePatientResponse:
      type: object
      properties:
        patient:
          type: object
          properties:
            id:
              type: integer
              example: 1
            version:
              type: integer
              example: 2
            name:
              type: string
              example: "Tan Jun Jie"
            date_of_birth:
              type: string
              example: "1999-09-21"
            age:
              type: integer
              example: 24
            sex:
              type: string
              example: "M"
            left_eye_image:
              type: string
              example: "tests3bucket.com"
            right_eye_image:
              type: string
              example: "tests3bucket.com"
            left_diabetic_retinopathy_prob:
              type: number
              example: 0.56
            right_diabetic_retinopathy_prob:
              type: number
              example: 0.11
            left_ocular_prob:
              type: number
              example: 0.11
            right_ocular_prob:
              type: number
              example: 0.11
            left_glaucoma_prob:
              type: number
              example: 0.11
            right_glaucoma_prob:
              type: number
              example: 0.11
            doctor_notes:
              type: string
              example: "This patient is healthy."
            report_link:
              type: string
              example: "testreportlink.com"
            visit_date:
              type: string
              example: "2023-09-23T18:14:45+08:00"
    UpdatePatientForm:
      type: object
      properties:
        left_eye_image:
          type: string
          format: binary
        right_eye_image:
          type: string
          format: binary
        left_diabetic_retinopathy_prob:
          type: number
          example: 0.56
        right_diabetic_retinopathy_prob:
          type: number
          example: 0.11
        left_ocular_prob:
          type: number
          example: 0.11
        right_ocular_prob:
          type: number
          example: 0.11
        left_glaucoma_prob:
          type: number
          example: 0.11
        right_glaucoma_prob:
          type: number
          example: 0.11
        doctor_notes:
          type: string
          example: "This patient is healthy."
        report_pdf:
          type: string
          format: binary
    GetPatientHistoryBadRequest:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: '[{\"type\":\"field\",\"value\":\"Asia/Singapor\",\"msg\":\"timezone is not valid\",\"path\":\"timezone\",\"location\":\"query\"}]'
        stack:
          type: string
          example: 'Error: [{\"type\":\"field\",\"value\":\"Asia/Singapor\",\"msg\":\"timezone is not valid\",\"path\":\"timezone\",\"location\":\"query\"}]'
    GetPatientHistoryResponse:
      type: object
      properties:
        1:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              version:
                type: integer
                example: 1
              name:
                type: string
                example: "Tan Jun Jie"
              date_of_birth:
                type: string
                example: "1999-09-21"
              age:
                type: integer
                example: 24
              sex:
                type: string
                example: "M"
              left_eye_image:
                type: string
                example: "tests3bucket.com"
              right_eye_image:
                type: string
                example: "tests3bucket.com"
              left_diabetic_retinopathy_prob:
                type: number
                example: 0.56
              right_diabetic_retinopathy_prob:
                type: number
                example: 0.11
              left_ocular_prob:
                type: number
                example: 0.11
              right_ocular_prob:
                type: number
                example: 0.11
              left_glaucoma_prob:
                type: number
                example: 0.11
              right_glaucoma_prob:
                type: number
                example: 0.11
              doctor_notes:
                type: string
                example: "This patient is healthy."
              report_pdf:
                type: string
                example: "testreportlink.com"
              visit_date:
                type: string
                example: "2023-09-23T18:14:45+08:00"
    UnauthorisedRequest:
      type: object
      properties:
        status:
          type: integer
          example: 401
        message:
          type: string
          example: "Please Authenticate"
        stack:
          type: string
          example: "Error: Please Authenticate"

    CreateDuplicatePatient:
      type: object
      properties:
        status:
          type: integer
          example: 409
        message:
          type: string
          example: "This patient has already been created."
        stack:
          type: string
          example: "Error: This patient has already been created."

    CreatePatientBadRequest:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: '[{"type":"field","value":"1999/09/21","msg":"date_of_birth has to be a valid date with format YYYY-MM-DD","path":"date_of_birth","location":"body"}]'
        stack:
          type: string
          example: 'Error: [{"type":"field","value":"1999/09/21","msg":"date_of_birth has to be a valid date with format YYYY-MM-DD","path":"date_of_birth","location":"body"}]'
    CreatePatientResponse:
      type: object
      properties:
        patient:
          type: object
          properties:
            id:
              type: integer
              example: 1
            version:
              type: integer
              example: 1
            name:
              type: string
              example: "Tan Jun Jie"
            date_of_birth:
              type: string
              example: "1999-09-21"
            age:
              type: integer
              example: 24
            sex:
              type: string
              example: "M"
            left_eye_image:
              type: string
              example: "tests3bucket.com"
            right_eye_image:
              type: string
              example: "tests3bucket.com"
            left_diabetic_retinopathy_prob:
              type: number
              example: 0.56
            right_diabetic_retinopathy_prob:
              type: number
              example: 0.11
            left_ocular_prob:
              type: number
              example: 0.11
            right_ocular_prob:
              type: number
              example: 0.11
            left_glaucoma_prob:
              type: number
              example: 0.11
            right_glaucoma_prob:
              type: number
              example: 0.11
            doctor_notes:
              type: string
              example: "This patient is healthy."
            report_link:
              type: string
              example: "testreportlink.com"
            visit_date:
              type: string
              example: "2023-09-23T18:14:45+08:00"
    CreatePatientForm:
      type: object
      properties:
        name:
          type: string
          example: "Tan Jun Jie"
        date_of_birth:
          type: string
          example: "1999-09-21"
        sex:
          type: string
          example: "M"
        left_eye_image:
          type: string
          format: binary
        right_eye_image:
          type: string
          format: binary
        left_diabetic_retinopathy_prob:
          type: number
          example: 0.56
        right_diabetic_retinopathy_prob:
          type: number
          example: 0.11
        left_ocular_prob:
          type: number
          example: 0.11
        right_ocular_prob:
          type: number
          example: 0.11
        left_glaucoma_prob:
          type: number
          example: 0.11
        right_glaucoma_prob:
          type: number
          example: 0.11
        doctor_notes:
          type: string
          example: "This patient is healthy."
        report_pdf:
          type: string
          format: binary

    CreateUserUsernameTaken:
      type: object
      properties:
        status:
          type: integer
          example: 409
        message:
          type: string
          example: "Username already taken"
        stack:
          type: string
          example: "Username already taken, at Object.createUser"
    LoginForm:
      type: object
      properties:
        username:
          type: string
          example: "ngxianghan99@gmail.com"
        password:
          type: string
          example: "samplepassword"
    RefreshTokenForm:
      type: object
      properties:
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImlhdCI6MTY5NDQ4NjUzNSwiZXhwIjoxNjk0NTAwOTM1LCJ0eXBlIjoicmVmcmVzaCJ9.NSX9bPKOJagAqoBpDU2SoQMFE2ST0qhYpVyR20-Z5CQ"
    ExpiredOrInvalidRefreshToken:
      type: object
      properties:
        status:
          type: integer
          example: 403
        message:
          type: string
          example: "Unauthorised: Invalid or expired refresh token."
        stack:
          type: string
          example: "Error: Unauthorised: Invalid or expired refresh token."
    LogoutTokenNotFound:
      type: object
      properties:
        status:
          type: integer
          example: 404
        message:
          type: string
          example: "Token not found"
        stack:
          type: string
          example: "Error: Token Not found, at Object.logout"
    LoginInvalidData:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: '[{\"type\":\"field\",\"value\":\"\",\"msg\":\"timezone cannot be empty\",\"path\":\"timezone\",\"location\":\"query\"},{\"type\":\"field\",\"value\":1111111111,\"msg\":\"username has to be a string\",\"path\":\"username\",\"location\":\"body\"},{\"type\":\"field\",\"value\":\"xiangh an1\",\"msg\":\"password cannot have blank spaces.\",\"path\":\"password\",\"location\":\"body\"}]'
        stack:
          type: string
          example: 'at BadRequestError (/Users/ngxianghan/Documents/Y4S1/BT4103/NUS-RetiMark/backend/app/middlewares/responseCodes.js:26:13)",'
    LoginIncorrectDetailsError:
      type: object
      properties:
        status:
          type: integer
          example: 401
        message:
          type: string
          example: "Incorrect email or password"
        stack:
          type: string
          example: "Error: Incorrect email or password, at Object.loginUserWithUsernameAndPassword"
    LogoutOrRefreshInvalidData:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: '[{"type":"field","value":"","msg":"refreshToken cannot be empty.","path":"refreshToken","location":"body"}]'
        stack:
          type: string
          example: "at BadRequestError (/Users/ngxianghan/Documents/Y4S1/BT4103/NUS-RetiMark/backend/app/middlewares/responseCodes.js:26:13)"
    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: object
          properties:
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImlhdCI6MTY5NDQ4NjUzNSwiZXhwIjoxNjk0NDkwMTM1LCJ0eXBlIjoiYWNjZXNzIn0.RfkK1wzZnwx037E7P37gDBPJ49zCEGTFv27SQ-B_lzA"
            expires:
              type: string
              example: "2023-09-23T17:29:08+08:00"
        refreshToken:
          type: object
          properties:
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImlhdCI6MTY5NDQ4NjUzNSwiZXhwIjoxNjk0NTAwOTM1LCJ0eXBlIjoicmVmcmVzaCJ9.NSX9bPKOJagAqoBpDU2SoQMFE2ST0qhYpVyR20-Z5CQ"
            expires:
              type: string
              example: "2023-09-23T21:29:08+08:00"
    LoginResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            username:
              type: string
              example: "ngxianghan99@gmail.com"
        tokens:
          type: object
          properties:
            accessToken:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImlhdCI6MTY5NDQ4NjUzNSwiZXhwIjoxNjk0NDkwMTM1LCJ0eXBlIjoiYWNjZXNzIn0.RfkK1wzZnwx037E7P37gDBPJ49zCEGTFv27SQ-B_lzA"
                expires:
                  type: string
                  example: "2023-09-23T17:29:08+08:00"
            refreshToken:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImlhdCI6MTY5NDQ4NjUzNSwiZXhwIjoxNjk0NTAwOTM1LCJ0eXBlIjoicmVmcmVzaCJ9.NSX9bPKOJagAqoBpDU2SoQMFE2ST0qhYpVyR20-Z5CQ"
                expires:
                  type: string
                  example: "2023-09-23T21:29:08+08:00"
